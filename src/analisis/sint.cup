package analisis;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{://codigo visible

    public ArrayList <Tree> trees = new ArrayList<>();

    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+s.value +" Linea "+ (s.left+1)+ " Columna "+ (s.right+1));
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    
    
    

:}

//terminales
terminal String GUION,DOS_PUNTOS, PORC, COR_IZQ, COR_DER, PUNTOCOMA, EQUI, DIS, MAS, INTERROGACION, COM_SIMPLE, COM_DOBLE, MAYOR, CONC, ASTERISCO, COMA;
terminal String NUM;
terminal String DECIMAL;
terminal String ASCII;
terminal String CHAR_MAY;
terminal String CHAR_MIN;
terminal String IDENTIFICADOR;
terminal String CARACTER;
terminal String CADENA;
terminal String CONJUNTO;
//terminal String ASCII;

//no terminales
non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal expresion;
non terminal first;
non terminal last;
non terminal notation;
non terminal con_coma;
non terminal normal;
non terminal comprobacion;
//precedence






//Conjunto con = new Conjunto(a,b); CONJUNTOS.add(con);

// 
start with ini; 

ini::= COR_IZQ first PORC PORC PORC PORC last COR_DER;

first ::= first:a instruccion|
          instruccion;

instruccion::= CONJUNTO DOS_PUNTOS IDENTIFICADOR:a GUION MAYOR notation:b PUNTOCOMA|   
               IDENTIFICADOR:b GUION MAYOR expresion:a PUNTOCOMA{:trees.add(new Tree((NodoBin) a,b));:};

notation::= CHAR_MAY EQUI CHAR_MAY|
            CHAR_MIN EQUI CHAR_MIN|
            NUM EQUI NUM|
            ASCII EQUI ASCII|
            con_coma;

con_coma::= con_coma COMA normal|
            normal;


normal::= CHAR_MAY|
          CHAR_MIN|
          GUION|
          ASCII|
          NUM;


expresion::= CONC:a expresion:b expresion:c{:
                NodoBin padre = new NodoBin(a);
                padre.setLeft((NodoBin)b);
                padre.setRight((NodoBin)c);
                RESULT = padre;
            :}|
             DIS:a expresion:b expresion:c{:
                NodoBin padre = new NodoBin(a);
                padre.setLeft((NodoBin)b);
                padre.setRight((NodoBin)c);
                RESULT = padre;
             :}|
             ASTERISCO:a expresion:b{:
                NodoBin padre = new NodoBin(a);
                padre.setLeft((NodoBin) b);
                RESULT = padre;
             :}|
             MAS:a expresion:b{:
                NodoBin padre = new NodoBin(a);
                padre.setLeft((NodoBin) b);
                RESULT = padre;
             :}|
             INTERROGACION:a expresion:b {:
                NodoBin padre = new NodoBin(a);
                padre.setLeft((NodoBin) b);
                RESULT = padre;
             :}|
             CARACTER:a {:
                NodoBin leave = new NodoBin(a);
                leave.setLeave(true);
                leave.setAnulable(false);
                RESULT = leave;
             :}|
             COR_IZQ IDENTIFICADOR:a COR_DER{:
                NodoBin leave = new NodoBin(a);
                leave.setLeave(true);
                leave.setAnulable(false);
                RESULT = leave;
             :};



last::= last comprobacion|
        comprobacion;


comprobacion::= IDENTIFICADOR DOS_PUNTOS CADENA PUNTOCOMA;


